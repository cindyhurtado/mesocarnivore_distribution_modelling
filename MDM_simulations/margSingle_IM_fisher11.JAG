
data{
  for(i in 1:n){
    for(j in 1:J.s){
      for (k in 1:K){
        y[i,j,k]<-y.orig[i,j,k]*O.s[j,k] #add operability
      }}}
  for(i in (n+1):M){
    for(j in 1:J.s){
      for (k in 1:K){
        y[i,j,k]<-y.orig[n+1,j,k]*O.s[j,k]  #add operability
      }}} 
}
model{
  psi[1] ~ dbeta(1,1)
  psi[2] ~ dbeta(1,1)
  psi[3] ~ dbeta(1,1) # M*psi = E[N(1)]
  p0.S ~ dbeta(1,1)
  p0.O ~ dbeta(1,1)
  sigma ~ dgamma(6, 4) # followed burgar et. al. 2018 for calculations, 5 to 300km2

  for(i in 1:M) {
    z[i,1] ~ dbern(psi[P_ID[i]])  ##the individual i is part of superpopulation M according to the PID-specific psi.
    #a[i,1] <- z[i,1] # recruited yet?
    s[i,1] ~ dunif(xlims[1], xlims[2])
    s[i,2] ~ dunif(ylims[1], ylims[2])
    
    #habmat this is the "habitat" mask stuff across the statespace. Values in the habitat #mask can be     #0 up to the number of populations you are modeling
    #0 means it is not habitat at all, 1 up to the number of pops defines what population
    #/area that       #statespace shall belong to
    #ppOK gets the habitat mask value at the individual's location
    #which population each observed indivdiual is from must be known, and provided to the #model as        #data. here, in ritidNP
    
    #ppOk[i] <- habmat[trunc(s[i,1]), trunc(s[i,2])] # habitat check. does this pixel have a #0 or a ritland number? not hab or hab
    
    pOk[i] <- ifelse( habmat[trunc(s[i,1]), trunc(s[i,2])] ==P_ID[i],1,0) # P_ID is a matrix that assigns 1 to members of the subpopulation and 0 to non-members
    
    OK[i] ~ dbern(pOk[i])  
    
    for(j in 1:J.s) {
      d2.s[i,j] <- (s[i,1]-X.s[j,1])^2 + (s[i,2]-X.s[j,2])^2
      p.S[i,j] <- p0.S*exp(-d2.s[i,j] / (2*sigma^2))
    }
    for(j in 1:J.o) {
      for (t in 1:T){
        d2.o[i,j,t] <- (s[i,1]-X.o[j,1])^2 + (s[i,2]-X.o[j,2])^2
        p.O[i,j,t] <- p0.O*exp(-d2.o[i,j,t] / (2*sigma^2))
      }
    }
    for(j in 1:J.s) {
      for(k in 1:K) {
        # years with SCR data
        y[i,j,k] ~ dbern(p.S[i,j]*z[i,1])
      } #k
    }#j.s
    for(j in 1:J.o){
      pn[i,j] <- (1-(p.O[i,j,1]*z[i,1]))
    } #j.o
    zi[i] <- (sum(z[i,]) > 0) # Was this bear ever alive?
  }#m
  for(j in 1:J.o) { #for every trap
    for(ko in 1:K.o) { #for every secondary sampling occasion
      # for(t in 1:T) { #for the number of years that OCC data was collected
      O[j,ko]~ dbern(1-prod(pn[,j])) # trapj detecting at least 1 ind on occasionk and yeart
      # is a bern draw of 1- not detecting 
      # } #t
    }#k
  }#j.o
  
  #A<-sum(habmat)
  
  Never <- sum(zi[]) # Bears ever alive
  
    for(t in 1:T) { #(T-1)) {
    
    #N[t] <- sum(z[,t])     
    N_sum <- sum(z[1:M, t]) # same as bears ever alive?
     
    for (b in 1:3){
    
     N[b] <-  inprod(zi[1:M,t],P_ID_dummy[,b]) # this t is population ID
     #D<- (N_sum/A)
    } #b
  }
} 
